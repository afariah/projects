#include <WiFi.h> //Wifi library 
#include "esp_wpa2.h" //wpa2 library for connections to Enterprise networks 
#include <M5StickCPlus.h> 
#define EAP_ANONYMOUS_IDENTITY "" 
#define EAP_IDENTITY " " // email for eduroam acc
#define EAP_PASSWORD " " //password for eduroam account 
#define WPA_PASSWORD " " //password for home wifi 
#define USE_EAP 
//SSID NAME 
#ifdef USE_EAP 
const char* ssid = " "; // eduroam SSID 
#else 
const char* ssid = " "; // home SSID 
#endif 
#include <ArduinoMqttClient.h> 
const char broker[] = "info8000.ga"; 
int port = 1883; 
WiFiClient wifiClient; 
MqttClient mqttClient(wifiClient); 
const char topic_status[] = "light_status"; 
const char topic_control_status[] = "fa82172/light_control_status"; 
const char topic_control_color[] = "fa82172/light_control_color"; 
char buffer[100]; 
String topic; 
void onMqttMessage(int messageSize) { 
Serial.println("Received a message from '"); 
topic = mqttClient.messageTopic(); 
Serial.print(topic); 
Serial.println(messageSize); 
Serial.println(); 
} 
void setup() { 
M5.begin(); 
M5.Lcd.begin(); 
M5.Lcd.fillScreen(BLACK); 
WiFi.disconnect(true); //disconnect form wifi to set new wifi connection
WiFi.mode(WIFI_STA); 
#ifdef USE_EAP 
esp_wifi_sta_wpa2_ent_set_identity((uint8_t *)EAP_ANONYMOUS_IDENTITY, strlen(EAP_ANONYMOUS_IDENTITY)); 
esp_wifi_sta_wpa2_ent_set_username((uint8_t *)EAP_IDENTITY, strlen(EAP_IDENTITY)); 
esp_wifi_sta_wpa2_ent_set_password((uint8_t *)EAP_PASSWORD, strlen(EAP_PASSWORD)); 
esp_wifi_sta_wpa2_ent_enable(); 
WiFi.begin(ssid); 
#else 
WiFi.begin(ssid,WPA_PASSWORD); 
#endif 
WiFi.setSleep(false); 
while (WiFi.status() != WL_CONNECTED) { 
delay(500); 
Serial.println("Waiting for connection"); 
} 

IPAddress ip = WiFi.localIP(); 
Serial.println(ip); 
mqttClient.onMessage(onMqttMessage); 
mqttClient.setUsernamePassword("giiuser","giipassword"); mqttClient.connect(broker, port); 
mqttClient.subscribe(topic_control_status); 
mqttClient.subscribe(topic_control_color); 
} 

//inital status 
int status = 0; 
int r=0; 
int g=0; 
int b=0; 
void loop(){ 
mqttClient.poll(); 
M5.update(); 

if (M5.BtnA.wasReleased()){ 
updateStatus();
sendStatus(); 
} 
int length = sizeof(mqttClient.read()); 
byte receivingMessage[length]; 
while(mqttClient.available()){ 
for(int i = 0; i < length; i++){ 
receivingMessage[i] = byte(mqttClient.read()); } 
if(strcmp(topic.c_str(),topic_control_status) == 0){ status = !status; 
updateStatus(); 
sendStatus(); 
} 


if(strcmp(topic.c_str(),topic_control_color) == 0){ r = receivingMessage[0]; 
g = receivingMessage[1]; 
b = receivingMessage[2]; 
updateStatus(); 
sendStatus(); } } } 

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b){ return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8); } 
void updateStatus(){ 
M5.Axp.ScreenBreath(status?15:0); 
M5.Lcd.fillScreen(rgb565(r,g,b)); 
} 

void sendStatus(){ 
mqttClient.beginMessage(topic_status); 
mqttClient.write(status); 
mqttClient.write(r); 
mqttClient.write(g); 
mqttClient.write(b); 
mqttClient.endMessage(); 
}
